//Consider move sample.py to ./sample/ folder including __init__.py, core.py(which is sample.py) and helpers.py.
//Python provides a very straightforward packaging system, which is simply an extension of the module mechanism to a directory.
Any directory with an __init__.py file is considered a Python package. The different modules in the package are imported in a similar manner as plain modules, but with a special behavior for the __init__.py file, which is used to gather all package-wide definitions.

https://wiki.python.org/moin/WebFrameworks
https://wiki.python.org/moin/WebBrowserProgramming

* Understand the difference between web application and other web sites.
* Understand what CGI and WSGI are.
* (https://wiki.python.org/moin/Templating) Consider which will be your templating system - Django, pyTenjin, pystache, Mako, Jinja2, Cheetah, http://jonpy.sourceforge.net, Ophelia, Chameleon, wheezy.template
* Or you'll need a framework, but you need to consider is it maintained and how new and up-to-date is it, such as: mod_wsgi, TurboGears, web2py, Bottle, Flask, Pyramid, Tornado
* But first check https://github.com/makaimc/compare-python-web-frameworks

Consider make a mockup.
setup.py should obviously be at the same folder as the module package.
If your project has no development dependencies, or you prefer development environment setup via setup.py, requirements.txt may be unnecessary.
Read http://docs.python-guide.org/en/latest/writing/structure/ before using tests.
Consider you to implement the front-end, using which framework or elements.
Understand the CGI usage (http://www.pythonschool.net/server-side-scripting/preparing-for-your-first-script/)

Support logging with multithreading support.

Support most new encryptions and credentials technologies.
Support fast DB to store the encrypted data.
Support password restoring.
Support login history for each user.
Support donating.
Support cookies.
Support multi-language.
Support HTTPS.
Support system maintenance logging.
Support site icon.

Registering:
Include a capcha to verify if the user is a robot.
Send a confirmation email to acknowledge the user email and verify it.
Confirm password twice.

Login:
Using either email, or user-name with password OR via GitHub, Google etc...
Prevent login overload.

Homepage of logged in user:
Show he's ip.
Show a logout represented as some element.
